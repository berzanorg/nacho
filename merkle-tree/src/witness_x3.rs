use crate::{choose, put_in_order, Sibling};
use data_structures::Field;
use poseidon_hash::{poseidon_hash, PoseidonHasher};

/// The type that represents a Merkle witness of three leaves in a Merkle tree.
///
/// The constant generic parameter `S` is used for number of the siblings and `B` is used for the total size of the witness in bytes.
///
/// The constant generic parameter `B` must always be equal to `S * 101` for correct deserialization.
pub struct WitnessX3<const S: usize, const B: usize> {
    pub(crate) siblings_by_leaves: [[Sibling; S]; 3],
    pub(crate) siblings_at_by_leaves: [[bool; S]; 2],
}

impl<const S: usize, const B: usize> From<&WitnessX3<S, B>> for [u8; B] {
    fn from(value: &WitnessX3<S, B>) -> Self {
        let mut buf = [0u8; B];

        for j in 0..3 {
            for i in 0..S {
                let pad_start = (i * 33) + (j * 33 * S);
                let pad_end = pad_start + 33;
                let sibling = &value.siblings_by_leaves[j][i];
                let sibling_buf: [u8; 33] = sibling.into();
                buf[pad_start..pad_end].copy_from_slice(&sibling_buf);
            }
        }

        buf
    }
}

impl<const S: usize, const B: usize> WitnessX3<S, B> {
    /// Calculates the root of the Merkle tree the witness represents using the given leaf values.
    ///
    /// The order of leaves and values affects the result.
    ///
    /// It is required that the 2nd and 3rd leaves become siblings at a height closer than the 1st leaf's.
    ///
    /// Otherwise the root is calculated incorrectly.
    ///
    /// When the 2nd and 3rd leaves are the same, only the 1st and 2nd leaves and values are used in the calculation, the 3rd leaf and value don't affect the result.
    ///
    /// When the 1st and 2nd leaves are the same, only the 1st leaf and 1st value are used in the calculation, the 2nd and 3rd leaves and values don't affect the result.
    ///
    /// When the 1st and 3rd leaves are the same, only the 1st and 2nd leaves and values are used in the calculation, the 3rd leaf and value don't affect the result.
    ///
    /// When the 1st, 2nd and 3rd leaves are the same, only the 1st leaf and value are used in the calculation, the 2nd and 3rd leaves and values don't affect the result.
    ///
    /// # Examples
    ///
    /// Calculate root:
    ///
    /// ```rs
    /// let mut hasher = create_poseidon_hasher();
    /// let value_x1: Field = 4.into();
    /// let value_x2: Field = 7.into();
    /// let value_x3: Field = 5.into();
    /// let root = witness_x3.calculate_root(&mut hasher, &value_x1, &value_x2, &value_x3);
    /// ```
    ///
    pub fn calculate_root(
        &self,
        hasher: &mut PoseidonHasher,
        value_x1: &Field,
        value_x2: &Field,
        value_x3: &Field,
    ) -> Field {
        let mut root_x1 = value_x1.clone();
        let mut root_x2 = value_x2.clone();
        let mut root_x3 = value_x3.clone();

        for i in 0..S {
            let sibling_x1 = choose!(
                self.siblings_at_by_leaves[0][i],
                root_x2,
                self.siblings_by_leaves[0][i].value
            );

            let sibling_x2 = choose!(
                self.siblings_at_by_leaves[1][i],
                root_x3,
                self.siblings_by_leaves[1][i].value
            );

            root_x1 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[0][i].is_left,
                    &[root_x1, sibling_x1]
                ),
            );

            root_x2 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[1][i].is_left,
                    &[root_x2, sibling_x2]
                ),
            );

            root_x3 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[2][i].is_left,
                    &[root_x3, self.siblings_by_leaves[2][i].value]
                ),
            );
        }

        root_x1
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use poseidon_hash::create_poseidon_hasher;
    use std::array;

    /// A helper function to calculate and assert Merkle roots.
    fn assert_root<const S: usize, const B: usize>(
        hasher: &mut PoseidonHasher,
        witness_x3: &WitnessX3<S, B>,
        value_x1: &str,
        value_x2: &str,
        value_x3: &str,
        expected_root: &str,
    ) {
        assert_eq!(
            witness_x3.calculate_root(
                hasher,
                &value_x1.parse().unwrap(),
                &value_x2.parse().unwrap(),
                &value_x3.parse().unwrap()
            ),
            expected_root.parse().unwrap()
        )
    }

    /// A helper function to construct Merkle witnesses.
    fn construct_witness<const S: usize, const B: usize>(
        siblings_x1: [(&str, bool); S],
        siblings_x2: [(&str, bool); S],
        siblings_x3: [(&str, bool); S],
    ) -> WitnessX3<S, B> {
        let mut siblings_at_leaf_x1_x2 = S;
        let mut siblings_at_leaf_x2_x3 = S;

        for i in 0..S {
            let i = S - 1 - i;

            if siblings_x1[i].1 == !siblings_x2[i].1 {
                siblings_at_leaf_x1_x2 = i;
                break;
            }
        }

        for i in 0..S {
            let i = S - 1 - i;

            if siblings_x2[i].1 == !siblings_x3[i].1 {
                siblings_at_leaf_x2_x3 = i;
                break;
            }
        }

        WitnessX3::<S, B> {
            siblings_by_leaves: [
                siblings_x1.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
                siblings_x2.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
                siblings_x3.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
            ],
            siblings_at_by_leaves: [
                array::from_fn(|i| {
                    if i == siblings_at_leaf_x1_x2 {
                        true
                    } else {
                        false
                    }
                }),
                array::from_fn(|i| {
                    if i == siblings_at_leaf_x2_x3 {
                        true
                    } else {
                        false
                    }
                }),
            ],
        }
    }

    #[test]
    fn calculates_root_using_leaves_0_2_and_3() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "18313116762352854852974423076445010405095479105421155530716961026452633398210",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "16096850662254554807737611690877017059024161913013639372387021205311709698814",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "965671346001925694530515883402629791179804839040411555520933963607770918438",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "20099482061755012005745232690480662821124791336736374152316845585872818514597",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "3125677329609891015053702813845316172258907790502301624879382148924403497094",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "11089430393166447971554662310357284671322292963385670551207707309536354409710",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "27084156256891612050923456078179302538128499530896942686833636060945814795165",
        );
    }

    #[test]
    fn calculates_root_using_leaves_1_10_and_13() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "2353942627369919824550363007773062996849922613987825046976351322635543426252",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "28525727264798592098193334924492425968575643296352489503353092994967140621141",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "17802736366057965122751376007350141001083310832130652792711236942226860645969",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "23626382909436462045856141724061279465756470386195596231656772115689017571342",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "11610341827306765659137097939605887563643026548744023490887885608168812287231",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "14152944355846170296734811241013768237578990860788029083536924239570115256062",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "4818838546780450825205234466760725311168371632279811802879000393747646049794",
        );
    }

    #[test]
    fn calculates_root_using_leaves_7_8_and_9() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "9129508356404681744390482280641112485787664068568420309415132489017579761546",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "12857658897482554649341800659440019419943589467049045359510609377404355505857",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "3922803992707393232133195978296238900973111942973212842850022671556323114038",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "13433717442184704635513942064463635006577552890336928769688367225912104134537",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "17436361621466306551344104289420277501319046275498380302966401213753973692536",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "28352089424463753170733381796664630406257269783022092461396006121766927848737",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "17559747523848861918843148191581802566308680500475184251229584786697180530870",
        );
    }

    #[test]
    fn calculates_root_using_leaves_14_1_and_2() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "24507380352902477620616065021432828215815382585446687247511217753670670028068",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "2353942627369919824550363007773062996849922613987825046976351322635543426252",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "16096850662254554807737611690877017059024161913013639372387021205311709698814",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "28760845317198585256210858647441464835023946653896876554856968526089582778812",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "969452781903484025088688260899641140841057312284418531650351097389798595009",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "21342503596874971616929675070703547740282348155069579072129867859862595349083",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "19016891331341041572818167699921652654589060023808444819103794564914244253155",
        );
    }

    #[test]
    fn calculates_root_using_leaves_1_7_and_7() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "2353942627369919824550363007773062996849922613987825046976351322635543426252",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "9129508356404681744390482280641112485787664068568420309415132489017579761546",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "8707188051255442055303856599438344328555333767315740855849276810551027453809",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "9129508356404681744390482280641112485787664068568420309415132489017579761546",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "2353942627369919824550363007773062996849922613987825046976351322635543426252",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "8707188051255442055303856599438344328555333767315740855849276810551027453809",
        );
    }

    #[test]
    fn calculates_root_using_leaves_2_5_and_2() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "16096850662254554807737611690877017059024161913013639372387021205311709698814",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "6685254693284469400864280532899332118361559027804876900594304873684430137665",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "24264851465466803642665287731396148652955233019235438728226489348107702672330",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "6685254693284469400864280532899332118361559027804876900594304873684430137665",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "16096850662254554807737611690877017059024161913013639372387021205311709698814",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "24264851465466803642665287731396148652955233019235438728226489348107702672330",
        );
    }

    #[test]
    fn calculates_root_using_leaves_8_8_and_8() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 404>(
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "0",
            "12857658897482554649341800659440019419943589467049045359510609377404355505857",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "0",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "0",
            "123456798987654321",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "0",
            "12857658897482554649341800659440019419943589467049045359510609377404355505857",
        );

        assert_root(
            hasher,
            &witness,
            "0",
            "123456798987654321",
            "123456798987654321",
            "20468198949394563802460512965219839480612000520504690501918527632215047268421",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "0",
            "123456798987654321",
            "12857658897482554649341800659440019419943589467049045359510609377404355505857",
        );

        assert_root(
            hasher,
            &witness,
            "123456798987654321",
            "123456798987654321",
            "123456798987654321",
            "12857658897482554649341800659440019419943589467049045359510609377404355505857",
        );
    }
}
