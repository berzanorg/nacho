use crate::{choose, put_in_order, Sibling};
use data_structures::Field;
use poseidon_hash::{poseidon_hash, PoseidonHasher};

/// The type that represents a Merkle witness of four leaves in a Merkle tree.
///
/// The constant generic parameter `S` is used for number of the siblings and `B` is used for the total size of the witness in bytes.
///
/// The constant generic parameter `B` must always be equal to `S * 135` for correct deserialization.
pub struct WitnessX4<const S: usize, const B: usize> {
    pub(crate) siblings_by_leaves: [[Sibling; S]; 4],
    pub(crate) siblings_at_by_leaves: [[bool; S]; 3],
}

impl<const S: usize, const B: usize> From<&WitnessX4<S, B>> for [u8; B] {
    fn from(value: &WitnessX4<S, B>) -> Self {
        let mut buf = [0u8; B];

        for j in 0..4 {
            for i in 0..S {
                let pad_start = (i * 33) + (j * 33 * S);
                let pad_end = pad_start + 33;
                let sibling = &value.siblings_by_leaves[j][i];
                let sibling_buf: [u8; 33] = sibling.into();
                buf[pad_start..pad_end].copy_from_slice(&sibling_buf);
            }
        }

        buf
    }
}

impl<const S: usize, const B: usize> WitnessX4<S, B> {
    /// Calculates the root of the Merkle tree the witness represents using the given leaf values.
    ///
    /// The order of leaves and values affects the result.
    ///
    /// It is required that both the pair of the 1st and 2nd leaves and the pair of the 3rd and 4th leaves become siblings at a height closer than other leaves'.
    ///
    /// Otherwise the root is calculated incorrectly.
    ///
    /// When the 1st and 2nd leaves are the same, only the 1st, 3rd and 4th leaves and values are used in the calculation, the 2nd leaf and value don't affect the result.
    ///
    /// When the 3rd and 4th leaves are the same, only the 1st, 2rd and 3rd leaves and values are used in the calculation, the 4th leaf and value don't affect the result.
    ///
    /// When the 1st and 3rd leaves are the same, only the 1st and 2nd leaves and values are used in the calculation, the 3rd and 4th leaves and values don't affect the result.
    ///
    /// When the 2nd and 3rd leaves are the same, only the 1st and 3rd and 4th leaves and values are used in the calculation, the 2nd leaf and value don't affect the result.
    ///
    /// When the 1st and 4th leaves are the same, only the 1st, 2nd and 3rd leaves are used in the calculation, the 4th leaf and value don't affect the result.
    ///
    /// # Examples
    ///
    /// Calculate root:
    ///
    /// ```rs
    /// let mut hasher = create_poseidon_hasher();
    /// let value_x1: Field = 4.into();
    /// let value_x2: Field = 7.into();
    /// let value_x3: Field = 5.into();
    /// let value_x4: Field = 2.into();
    /// let root = witness_x4.calculate_root(&mut hasher, &value_x1, &value_x2, &value_x3, &value_x4);
    /// ```
    ///
    pub fn calculate_root(
        &self,
        hasher: &mut PoseidonHasher,
        value_x1: &Field,
        value_x2: &Field,
        value_x3: &Field,
        value_x4: &Field,
    ) -> Field {
        let mut root_x1 = value_x1.clone();
        let mut root_x2 = value_x2.clone();
        let mut root_x3 = value_x3.clone();
        let mut root_x4 = value_x4.clone();

        for i in 0..S {
            let sibling_x1 = choose!(
                self.siblings_at_by_leaves[0][i],
                root_x3,
                choose!(
                    self.siblings_at_by_leaves[1][i],
                    root_x2,
                    self.siblings_by_leaves[0][i].value
                )
            );

            let sibling_x3 = choose!(
                self.siblings_at_by_leaves[2][i],
                root_x4,
                self.siblings_by_leaves[2][i].value
            );

            root_x1 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[0][i].is_left,
                    &[root_x1, sibling_x1]
                ),
            );

            root_x2 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[1][i].is_left,
                    &[root_x2, self.siblings_by_leaves[1][i].value]
                ),
            );

            root_x3 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[2][i].is_left,
                    &[root_x3, sibling_x3]
                ),
            );

            root_x4 = poseidon_hash(
                hasher,
                put_in_order!(
                    self.siblings_by_leaves[3][i].is_left,
                    &[root_x4, self.siblings_by_leaves[3][i].value]
                ),
            );
        }

        root_x1
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use poseidon_hash::create_poseidon_hasher;
    use std::array;

    /// A helper function to calculate and assert Merkle roots.
    fn test_roots<const S: usize, const B: usize>(
        hasher: &mut PoseidonHasher,
        witness_x4: &WitnessX4<S, B>,
        values_to_use: [&str; 4],
        expected_roots: [&str; 16],
    ) {
        assert_root(hasher, &witness_x4, "0", "0", "0", "0", expected_roots[0]);

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            "0",
            "0",
            "0",
            expected_roots[1],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            values_to_use[1],
            "0",
            "0",
            expected_roots[2],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            "0",
            values_to_use[2],
            "0",
            expected_roots[3],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            "0",
            "0",
            values_to_use[3],
            expected_roots[4],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            values_to_use[1],
            "0",
            "0",
            expected_roots[5],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            values_to_use[1],
            values_to_use[2],
            "0",
            expected_roots[6],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            "0",
            values_to_use[2],
            values_to_use[3],
            expected_roots[7],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            "0",
            values_to_use[2],
            "0",
            expected_roots[8],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            "0",
            "0",
            values_to_use[3],
            expected_roots[9],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            values_to_use[1],
            "0",
            values_to_use[3],
            expected_roots[10],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            values_to_use[1],
            values_to_use[2],
            "0",
            expected_roots[11],
        );

        assert_root(
            hasher,
            &witness_x4,
            "0",
            values_to_use[1],
            values_to_use[2],
            values_to_use[3],
            expected_roots[12],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            "0",
            values_to_use[2],
            values_to_use[3],
            expected_roots[13],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            values_to_use[1],
            "0",
            values_to_use[3],
            expected_roots[14],
        );

        assert_root(
            hasher,
            &witness_x4,
            values_to_use[0],
            values_to_use[1],
            values_to_use[2],
            values_to_use[3],
            expected_roots[15],
        );
    }

    /// A helper function to calculate and assert Merkle roots.
    fn assert_root<const S: usize, const B: usize>(
        hasher: &mut PoseidonHasher,
        witness_x4: &WitnessX4<S, B>,
        value_x1: &str,
        value_x2: &str,
        value_x3: &str,
        value_x4: &str,
        expected_root: &str,
    ) {
        assert_eq!(
            witness_x4.calculate_root(
                hasher,
                &value_x1.parse().unwrap(),
                &value_x2.parse().unwrap(),
                &value_x3.parse().unwrap(),
                &value_x4.parse().unwrap()
            ),
            expected_root.parse().unwrap()
        )
    }

    /// A helper function to construct Merkle witnesses.
    fn construct_witness<const S: usize, const B: usize>(
        siblings_x1: [(&str, bool); S],
        siblings_x2: [(&str, bool); S],
        siblings_x3: [(&str, bool); S],
        siblings_x4: [(&str, bool); S],
    ) -> WitnessX4<S, B> {
        let mut siblings_at_leaf_x1_x3 = S;
        let mut siblings_at_leaf_x1_x2 = S;
        let mut siblings_at_leaf_x3_x4 = S;

        for i in 0..S {
            let i = S - 1 - i;

            if siblings_x1[i].1 == !siblings_x3[i].1 {
                siblings_at_leaf_x1_x3 = i;
                break;
            }
        }

        for i in 0..S {
            let i = S - 1 - i;

            if siblings_x1[i].1 == !siblings_x2[i].1 {
                siblings_at_leaf_x1_x2 = i;
                break;
            }
        }

        for i in 0..S {
            let i = S - 1 - i;

            if siblings_x3[i].1 == !siblings_x4[i].1 {
                siblings_at_leaf_x3_x4 = i;
                break;
            }
        }

        WitnessX4::<S, B> {
            siblings_by_leaves: [
                siblings_x1.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
                siblings_x2.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
                siblings_x3.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
                siblings_x4.map(|(value, is_left)| Sibling {
                    value: value.parse().unwrap(),
                    is_left,
                }),
            ],
            siblings_at_by_leaves: [
                array::from_fn(|i| {
                    if i == siblings_at_leaf_x1_x3 {
                        true
                    } else {
                        false
                    }
                }),
                array::from_fn(|i| {
                    if i == siblings_at_leaf_x1_x2 {
                        true
                    } else {
                        false
                    }
                }),
                array::from_fn(|i| {
                    if i == siblings_at_leaf_x3_x4 {
                        true
                    } else {
                        false
                    }
                }),
            ],
        }
    }

    #[test]
    fn calculates_root_using_leaves_0_1_2_and_3() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "18313116762352854852974423076445010405095479105421155530716961026452633398210",
                "8613162468694076463391910646192042077830747252301686079926789977490717971521",
                "24274255794286753327401329087326507073609579265872730686420441923070286553304",
                "1833351972368478446140103415657268469675795794821153598622085949012514002444",
                "1860688451907449782174118432969238314999299903820838822139776994875050507822",
                "26816759836076459715952263094548968849843697535765074595912510311477391553790",
                "28228029614323179342161181665699864444663240441581755962788386784736202148455",
                "19363129079037994727894187885228943854775690539156423899201521529180600282309",
                "8874204562596554947851370579152131016516251242885547150404528387959922343642",
                "26836931265749947414120876862678798864732191436268282296628876018840746050002",
                "6698834795479968647327783645413605085582620591299925971612186147133143338757",
                "2454188128274897181372801405352522763391854007176073420567428392734145085651",
                "24483062835036551821399758957614229028023161503568443040306871326479112428496",
                "6005695965686765877229843612193855861159462285209935749963609531730203643134",
                "21169618096592805663037253083658049495095901919088060187031997413522647094766",
            ],
        );
    }

    #[test]
    fn calculates_root_using_leaves_1_3_5_and_7() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "2353942627369919824550363007773062996849922613987825046976351322635543426252",
                "6098830382605008675631319612323961328183415170420496551314967311329156016497",
                "26288756410649008483370251415844570077185955790479366798109616121778895016219",
                "2089774097181248610508375647348739883064810071620227740549701356657160318196",
                "10859761429343857156121792007043216701090671989433859596638298544394975792895",
                "24283380803388637866690206730286749517645070992454267545807668601237255960981",
                "21202786625948395194999622803387289230456909962519455855093707113198769751695",
                "20448771234155587793829669024357018553400795400415520642418556005180176641682",
                "15720821329317308341038278248667328762598936054757179948945548407114670025437",
                "12553964489172985098704335775096578304358673178328690683603161878413663083531",
                "3712284190147796180086210593755622310957313881949301961439297312845551048490",
                "6790950593952760311270171148256547334608335323187774431338903396971473193215",
                "22085087022544811465050077775572584220699890994247754503442151265044408644152",
                "1479152410180113929882384402834491026896437987399651771799081563218508173793",
                "14030762346939020981961508472416304599922761179025724056859835556571443786156",
            ],
        );
    }

    #[test]
    fn calculates_root_using_leaves_2_4_8_and_10() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "16096850662254554807737611690877017059024161913013639372387021205311709698814",
                "8239193045499883541776537639137126005834495510049096333657248580218971011452",
                "14100230506935550792458305016950871974765865956902348316815811648576699574868",
                "3526530101208622616260005182635690004271342573913913736081652333384389781844",
                "3008794806709219989861750657339813254794422023501419333735621523005821786175",
                "260290144765378843547441140519405110700472331850860852050514257111546181951",
                "20314737026420309490627046183153300396184861471377513444711752679067197503583",
                "25449983539679814201728787978114667499615926582353573031830754852542933319990",
                "14815288783907828810249907834924012713749332849730315530332150524212470506871",
                "3387426231258464940606169585664144001762569737430419201428541662481173142053",
                "16985696896551736478019791579774655486690858536831312500426287312063236084588",
                "3497507181851328619716230300801476621574445545201351679268921901257754294993",
                "2668158754916660566471679681610499509979560895976244144642605122469620880629",
                "8217580748642782532370348347963868629115029532406922090634943707040003699639",
                "18392519516041218618655958183012738648485664923309576602872481401955407663300",
            ],
        );
    }

    #[test]
    fn calculates_root_using_leaves_15_11_4_and_5() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "25779254616427824474378540226517692998919163224302179739093699523278326136485",
                "8446527921036353372221526263800634517172713470175628845422216560046993720553",
                "7924650551983407095221194347219470837558093668825129235562204178746063350851",
                "28928789352228970498480609836538589657538992931134178147877364174538104831635",
                "27019264921198098520587509663829618221793205191317809985073796961198339581845",
                "22734122369249238409356036298417465549264439629112284627264603215321866745106",
                "24005456167356734731151837952032378093929701156482513842218021298213496727593",
                "15479358326149091851737417182839227213797993840526701283174600875786866538135",
                "5755681742555819357357186153918944330446609108787211659079069938970143796599",
                "16191634842390551461136959274853547385894570719339224938990663490807811774407",
                "21207741364041734245461111861549149238581012201748547307731880598434881905997",
                "23518013242548168145556181840198641611754707466079902657399171817658224026074",
                "5063301126935771611724851100473240864330432722942252608807057320905584578565",
                "23122697610172133440314869696054122016776594837320397621222191523801715305400",
                "17745977228618329317795619296236084735975688380212536169552938183610976823650",
            ],
        );
    }

    #[test]
    fn calculates_root_using_leaves_3_3_11_and_12() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "965671346001925694530515883402629791179804839040411555520933963607770918438",
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "5633040079578125596747365340429566607609738104539185561681613250770079905782",
                "11108951855080127744821118594502905753427588174551293413497292704376169578000",
                "965671346001925694530515883402629791179804839040411555520933963607770918438",
                "5633040079578125596747365340429566607609738104539185561681613250770079905782",
                "27636841293920468802466648726330532103058722641737912840630280323969990447459",
                "21960816800312901977652134769916595925878831285747116597037694958858860245603",
                "20595781964939660341881385720006782113470198814306137429513892095331982982893",
                "11108951855080127744821118594502905753427588174551293413497292704376169578000",
                "21960816800312901977652134769916595925878831285747116597037694958858860245603",
                "27636841293920468802466648726330532103058722641737912840630280323969990447459",
                "10218729678215712127180486357713957223099073067770564486160410844398363096231",
                "20595781964939660341881385720006782113470198814306137429513892095331982982893",
                "10218729678215712127180486357713957223099073067770564486160410844398363096231",
            ],
        );
    }

    #[test]
    fn calculates_root_using_leaves_5_6_14_and_14() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    false,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "6685254693284469400864280532899332118361559027804876900594304873684430137665",
                "7977651669121579111799563521830859747897834936239826063994061584963871455465",
                "15561666193896292014926280119849157744044061706308654815572523359121103636049",
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "1182876731210305805073625550704882694510180224859992593827614008621258781905",
                "21044103356547458983495866015270572333624817638571650992472836174828792760758",
                "15561666193896292014926280119849157744044061706308654815572523359121103636049",
                "24992771699073221300991310853995728584768714452974166530432169519463637985468",
                "6685254693284469400864280532899332118361559027804876900594304873684430137665",
                "7977651669121579111799563521830859747897834936239826063994061584963871455465",
                "5877726312143086970752433788694155240451292374128357683585606180677997267550",
                "21044103356547458983495866015270572333624817638571650992472836174828792760758",
                "24992771699073221300991310853995728584768714452974166530432169519463637985468",
                "1182876731210305805073625550704882694510180224859992593827614008621258781905",
                "5877726312143086970752433788694155240451292374128357683585606180677997267550",
            ],
        );
    }

    #[test]
    fn calculates_root_using_leaves_7_6_7_and_10() {
        let mut hasher = create_poseidon_hasher();
        let hasher = &mut hasher;

        let witness = construct_witness::<4, 540>(
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", true),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    true,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    false,
                ),
            ],
            [
                ("0", false),
                (
                    "21565680844461314807147611702860246336805372493508489110556896454939225549736",
                    true,
                ),
                (
                    "2447983280988565496525732146838829227220882878955914181821218085513143393976",
                    false,
                ),
                (
                    "544619463418997333856881110951498501703454628897449993518845662251180546746",
                    true,
                ),
            ],
        );

        test_roots(
            hasher,
            &witness,
            [
                "123456798987654321",
                "2345679898765432",
                "34567989876543",
                "456798987654",
            ],
            [
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "9129508356404681744390482280641112485787664068568420309415132489017579761546",
                "7977651669121579111799563521830859747897834936239826063994061584963871455465",
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "12183966173198671444757760711320515428144559832113464545705287453893825432035",
                "7977651669121579111799563521830859747897834936239826063994061584963871455465",
                "20468198949394563802460512965219839480612000520504690501918527632215047268421",
                "9129508356404681744390482280641112485787664068568420309415132489017579761546",
                "9129508356404681744390482280641112485787664068568420309415132489017579761546",
                "7977651669121579111799563521830859747897834936239826063994061584963871455465",
                "12183966173198671444757760711320515428144559832113464545705287453893825432035",
                "7977651669121579111799563521830859747897834936239826063994061584963871455465",
                "9129508356404681744390482280641112485787664068568420309415132489017579761546",
                "12183966173198671444757760711320515428144559832113464545705287453893825432035",
                "12183966173198671444757760711320515428144559832113464545705287453893825432035",
            ],
        );
    }
}
